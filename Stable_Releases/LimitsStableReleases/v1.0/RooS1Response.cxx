/*****************************************************************************
 * Project: ProfileLikelihood                                                *
 *                                                                           *
 * Markus Horn - 11 July 2013                                                *
 *****************************************************************************/


//#include "ProfileLikelihood.h"

#include "RooS1Response.h"

#include "RooRealVar.h"

#include "RooPoisson.h"
#include "RooGaussian.h"

#include <math.h>
#include "TMath.h"

ClassImp(RooS1Response) // to integrate class to ROOT

RooS1Response::RooS1Response(const char* name, const char *title,
                             RooAbsReal& _S1,
                             RooAbsReal& _nPhot,
                             RooAbsReal& _r,
                             RooAbsReal& _z) :
    RooAbsPdf(name, title),
    S1("S1","S1",this,_S1),
    nPhot("nPhot","nPhot",this,_nPhot),
    r("r","radius [cm]",this,_r),
    z("z","z [cm]",this,_z)
{
}

RooS1Response::RooS1Response(const RooS1Response& other, const char* name) :
RooAbsPdf(other, name),
S1("S1",this,other.S1),
nPhot("nPhot",this,other.nPhot),
r("r",this,other.r),
z("z",this,other.z)
{
}


/*************/

Double_t RooS1Response::evaluate() const
{
// Variables
// RooRealVar S1("S1","S1 [estimated photons]",0,1200);
// RooRealVar nPhot("nPhot","nPhot",0,1200); //number of liquid scintillation photons generated by an event
// RooRealVar r("r","radius [cm]",0,0,22); //the reconstructed radial position [cm] relative to central axis of LUX
// RooRealVar z("z","z [cm]",10,10,48); //the reconstructed z position [cm], relative to top face of bottom PMT
    
    double simple = TMath::Poisson(S1,nPhot);

    double nPHE = nPhot * LightCollectionEfficiency(r,z); // Light collection efficiency as a function of r, z
    
    return simple;
}

double LightCollectionEfficiency(double r, double z)
{
    
    return 1.;
}
