/***************************************************************************** 
 * Project: RooFit                                                           * 
 *                                                                           * 
 * This code was autogenerated by RooClassFactory                            * 
 *****************************************************************************/ 

// Your description goes here... 

#include "Riostream.h" 

#include "RooWimpSpec_ctsPerkeVkgdaypb.h" 
#include "RooAbsReal.h" 
#include "RooAbsCategory.h" 
#include <math.h> 
#include "TMath.h" 
#include "TVector3.h"

ClassImp(RooWimpSpec_ctsPerkeVkgdaypb) 

 RooWimpSpec_ctsPerkeVkgdaypb::RooWimpSpec_ctsPerkeVkgdaypb(const char *name, const char *title, 
                        RooAbsReal& _Enr,
                        RooAbsReal& _mWimp,
                        RooAbsReal& _targetA,
                        RooAbsReal& _targetZ,
                        RooAbsReal& _rho,
                        //RooAbsReal& _halo_beta,
                        RooAbsReal& _dayOfYear,
                        RooAbsReal& _vEsc,
                        RooAbsReal& _v0,
                        RooAbsReal& _ff_c,
                        RooAbsReal& _ff_a,
                        RooAbsReal& _ff_s,
                        RooAbsReal& _idm_delta) :
   RooAbsPdf(name,title), 
   Enr("Enr","Enr",this,_Enr),
   mWimp("mWimp","mWimp",this,_mWimp),
   targetA("targetA","targetA",this,_targetA),
   targetZ("targetZ","targetZ",this,_targetZ),
   rho("rho","rho",this,_rho),
   //halo_beta("halo_beta","halo_beta",this,_halo_beta),
   dayOfYear("dayOfYear","dayOfYear",this,_dayOfYear),
   vEsc("vEsc","vEsc",this,_vEsc),
   v0("v0","v0",this,_v0),
   ff_c("ff_c","ff_c",this,_ff_c),
   ff_a("ff_a","ff_a",this,_ff_a),
   ff_s("ff_s","ff_s",this,_ff_s),
   idm_delta("idm_delta","idm_delta",this,_idm_delta)
 { 
 } 


 RooWimpSpec_ctsPerkeVkgdaypb::RooWimpSpec_ctsPerkeVkgdaypb(const RooWimpSpec_ctsPerkeVkgdaypb& other, const char* name) :  
   RooAbsPdf(other,name), 
   Enr("Enr",this,other.Enr),
   mWimp("mWimp",this,other.mWimp),
   targetA("targetA",this,other.targetA),
   targetZ("targetZ",this,other.targetZ),
   rho("rho",this,other.rho),
   //halo_beta("halo_beta",this,other.halo_beta),
   dayOfYear("dayOfYear",this,other.dayOfYear),
   vEsc("vEsc",this,other.vEsc),
   v0("v0",this,other.v0),
   ff_c("ff_c",this,other.ff_c),
   ff_a("ff_a",this,other.ff_a),
   ff_s("ff_s",this,other.ff_s),
   idm_delta("idm_delta",this,other.idm_delta)
 { 
 } 

Double_t get_vMin_kmPers(Double_t ER_keV, Double_t mWimp, Double_t mN_GeV, Double_t delta_keV=0){ //in km/s
   Double_t mu_GeV = mWimp*mN_GeV/(mWimp+mN_GeV);
   return (299792*pow((2*mN_GeV*ER_keV/1E6),(-0.5)))*((mN_GeV*ER_keV/1E6)/mu_GeV+delta_keV);
}
Double_t get_vE_kmPers(Double_t dayofyear){
   TVector3 vs(10,233,7);
   TVector3 eps1(0.9931,0.1170,-0.01032);
   TVector3 eps2(-0.0670,0.4297,-0.8678);
   TVector3 vRel(vs+29.79*(eps1*cos(2*TMath::Pi()*(dayofyear-80)/365)+eps2*sin(2*TMath::Pi()*(dayofyear-80)/365)));
   return vRel.Mag();
}

Double_t get_shmVInt_sPerkm(Double_t vmin, Double_t vesc, Double_t vE, Double_t v0){
   Double_t x = vmin/v0;
   Double_t y = vE/v0;
   Double_t z = vesc/v0;
   Double_t Nesc = TMath::Erf(z) - 2*z*exp(-z*z)*pow(TMath::Pi(), -0.5);
   if(z<y && x<(TMath::Abs(y-z))){
      return (1/(v0*y));
   }
   else if(z>y && x<TMath::Abs(y-z)){
      Double_t ans = (TMath::Erf(x+y)-TMath::Erf(x-y)-4*pow(TMath::Pi(),-0.5)*y*exp(-z*z))/(2*Nesc*y*v0);
      return ans;
   }
   else if(TMath::Abs(y-z)<x && x<(y+z)){
      Double_t ans = (TMath::Erf(z)-TMath::Erf(x-y)-2*pow(TMath::Pi(),-0.5)*(y+z-x)*exp(-z*z))/(2*Nesc*y*v0);
      return ans; 
   }
   else return 0;
}



 Double_t RooWimpSpec_ctsPerkeVkgdaypb::evaluate() const 
 {  
   const double amu_GeV=0.931494;
   Double_t mN_GeV = amu_GeV*targetA; //target nucleus mass in GeV
   Double_t mu_GeV = (amu_GeV*mWimp)/(amu_GeV+mWimp); // WIMP-nucleon reduced mass in GeV
   Double_t nucleiPerkg = 6.0221413e+23*1000./targetA;
   Double_t vMin_kmPers=get_vMin_kmPers(Enr,mWimp,mN_GeV,idm_delta);
   Double_t vE_kmPers=get_vE_kmPers(dayOfYear);
   //if halo.getLabel="SHM"{
      Double_t velInt_sPerkm=get_shmVInt_sPerkm(vMin_kmPers, vEsc, vE_kmPers,v0);
   //}
   Double_t prefactor = 7.7652447e-22; //Google (1 keV * 1 day * c^2 * 1 s)/(1 cm * 1 km * 1 GeV)*1E-36

   Double_t preFF= prefactor*nucleiPerkg*mN_GeV*pow(targetA,2)*rho*velInt_sPerkm/(2*mWimp)/pow(mu_GeV,2);

   // Momentum transfer and nuclear radius for form factor
   double q_fm = sqrt(2.*mN_GeV*(Enr*1e-06))/0.197; // Conversion of q from [GeV/c] to [fm]^-1 (arXiv:0608035v2)
   
   //nuclear radius params, arXiv:0608035v2
   double R = sqrt(pow(ff_c, 2.) + 7./3.*pow(TMath::Pi()*ff_a,2.) - 5*pow(ff_s,2.)); // [fm]

   // Nuclear form factor
   double FSquared = 1.;
   if (q_fm*R > 0.)
     FSquared = pow( 3.*(sin(q_fm*R)-q_fm*R*cos(q_fm*R))/ pow(q_fm*R, 3.) , 2. )*TMath::Exp(-pow(q_fm*ff_s, 2.));   
   
   return FSquared*preFF;
 } 



