function LUXHitPattern(pmt_hits, options)
% LUXHitPattern(pmt_hits, options)
% 
% Inputs:
%  pmt_hits - 122-element array containing PMT signals (expects signals >1,
%   i.e. phe)
%  options - optional structure with the following recognized fields:
%   .cmap - custom colormap to use, of format generated by Matlab colormap
%     function. [Default: Matlab default colormap]
%   .color_range - [optional] specify [min, max] PMT signal for color
%     scaling. [Default: [min, max] of pmt_hits]
%   .fignum - figure number to use for plotting. [Default: 122]
%   .hand - axes handles, turns off fignum
%   .scaling - string specifying 'lin' or 'log' for linear or logarithmic
%     coloring. [Default: 'log']
%   .zero_white - set to 1 to set PMTs with no signal to white. If
%     color_range is specified, PMTs with signal below color_range(1) will
%     also be white.
%     [Default: 1]
% 2010-04-27 DCM v1
% 2010-07-15 JRV - If any colors vals are NaN they are set to 1, also added
%                  the ability to specify an axis handle instead of fignum.
% 2010-09-07 DCM - Added .zero_white option; minor color bug fix for log
%                  scaling
% 


%% Input checking

if nargin < 1 || length(pmt_hits) ~= 122
    disp('ERROR: Please specify 122-element array with PMT hit values');
    return
end

if nargin > 1
    field_names = fieldnames(options);
    for ii=1:length(field_names)
        eval([field_names{ii} ' = options.' field_names{ii} ';']);
    end
end

if ~exist('zero_white','var')
    zero_white = true;
end

if ~exist('cmap','var')
    cmap = colormap;
end

if ~exist('color_range','var') || length(color_range) ~= 2
    if any(pmt_hits>0)
        color_range = [min(pmt_hits(pmt_hits>0)) max(pmt_hits(pmt_hits>0))];
    else
        color_range = [0 1];
    end
end

if ~exist('fignum','var')
    fignum = 122;
end

if ~exist('scaling','var')
    scaling = 'log';
end


%% Get PMT positions

pmt_pos = LUXPMTArray;


%% Create hit pattern

min_val = color_range(1);
max_val = color_range(2);

if strcmp(scaling,'log')
    colors = ceil(size(cmap,1) .* ((log10(pmt_hits)-log10(min_val))./(log10(max_val)-log10(min_val))));
    colors(pmt_hits == 0 | colors == 0 | isnan(colors)) = 1;
else
    colors = ceil(size(cmap,1) .* ((pmt_hits - min_val)./(max_val-min_val)));
    colors(colors == 0 | isnan(colors)) = 1;
end

% Label blank PMTs as white
if zero_white && any(pmt_hits == 0)
    cmap(2:end+1,:) = cmap;
    cmap(1,:) = [1 1 1];
    
    colors = colors+1;
    colors(pmt_hits == 0) = 1;
end


%% Draw pattern

pmt_width = 5.7; % cm

tt = 0:pi/64:2*pi;
xx = pmt_width/2.*cos(tt);
yy = pmt_width/2.*sin(tt);

if exist('hand','var')
    axes(hand);
else
    figure(fignum); clf;
end

for ii_pmt=1:122
    fill3(xx+pmt_pos(ii_pmt,1), yy+pmt_pos(ii_pmt,2), pmt_pos(ii_pmt,3).*ones(size(xx)), cmap(colors(ii_pmt),:));
    hold on
end
hold off

axis equal
axis off

colorbar;

if strcmp(scaling,'log')
    d = caxis;
    d_vals = linspace(d(1),d(2),10);
    label_vals = logspace(log10(min_val),log10(max_val),length(d_vals));
    labels = {};
    for ii=1:length(label_vals)
        labels{ii} = sprintf('%d',round(label_vals(ii)));
    end
    colorbar('YTick',d_vals,'YTickLabel',labels);
elseif strcmp(scaling,'lin')
    colorbar;
    caxis([min_val max_val]);
end


