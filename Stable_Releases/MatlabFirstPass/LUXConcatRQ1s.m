function status = LUXConcatRQ1s(filename_prefix, file_list_nbs, output_path);
%status = LUXConcatRQ1s(filename_prefix, file_list_nbs, output_path);
%
% Concatenates the RQ files generated by LUX01BuildRQ1s
%
% Inputs:
%		filename_prefix - dataset name (e.g. lux01_20090101T1234)
%		file_list_nbs   - list of file numbers to merge (optional, default is all files)
%		output_path	    - path to put .rq1.mrg file
%
% 090420 DCM - Updated to include REEF_path input (REQUIRED)
% 090423 LdV - Renamed it from concatRQs_v1 LUX01ConcatRQ1s
% 2009-04-24 JJC - Wrote it to merge binary files
% 2009-05-30 DCM - output RQ files now have permissions set to 755 after
%                  creation
% 2009-08-24 JJC - merges block 3 now. major rewrite. loops through files and merges block 2, then loops again to merge block 3
% 2010-02-03 JJC, DCM - put in support for RQ1 files written with varying
%                       endianness (i.e. written by Intel machine, read by
%                       PowerPC machine)
% 

status=0;
if ~exist('filename_prefix','var')
    filename_prefix=[];
end
if isempty(filename_prefix)
    disp('Please enter the name of a dataset');
    disp(' ');
end

if ~exist('merge_binary', 'var')
    merge_binary = 1; % default for now, maybe check for type of file and merge whatever is there in the future
end
dataset_to_merge = filename_prefix

% 090420 DCM - adding smart path finding for Brown cluster / other
if ~exist('output_path','var') || isempty(output_path)
    % Get name of current computer
    [unix_status,hostname] = system('hostname');

    if strncmp(hostname,'gsk',3) && ~strncmp(hostname(8),'.',1) % Brown cluster
        output_path = '/disk/paRAID02/analysis/matlab/LUX01/RQ1s/';
    else
        output_path = sprintf('Temporary/LUX01/RQ1s/%s/',filename_prefix);
    end
end

if merge_binary
    file_RQ1_extension = '.rq1';
    file_RQ1_merged_extension = '.rq1.mrg';
else
    file_RQ1_extension = '.rqm.mat';
    file_RQ1_merged_extension = '.rqm.mrg.mat';
end
if ~exist('file_list_nbs','var') || isempty(file_list_nbs)
    file_list = dir([output_path,'/',dataset_to_merge,'/', dataset_to_merge, '_f*' file_RQ1_extension]);
    if isempty(file_list)
        disp('No RQ1 files found');
        return
    else
        file_list_nbs=zeros(size(file_list));
        for iifile = 1:length(file_list)
            file_list_nbs(iifile) = str2num(file_list(iifile).name(22:30));
        end
    end
else
    for file_ii=1:length(file_list_nbs)
        file_ct = file_list_nbs(file_ii);
        file_list(file_ii) = dir([output_path, '/',dataset_to_merge,'/',dataset_to_merge,sprintf('_f%09d',file_ct), file_RQ1_extension]);
    end
end
   

dp_merge = [];

if ~merge_binary
    for iifile = 1:length(file_list)
        load([output_path,'/',file_list(iifile).name]);
        if iifile == 1
            dp_merge = dp{1};
        else
            field_list = fieldnames(dp{1});
            for ii_fields = 1:length(field_list)
                field_temp = getfield(dp{1} , cell2mat(field_list(ii_fields)));

                merge_field_temp = getfield(dp_merge , cell2mat(field_list(ii_fields)));
                if any(size(field_temp)==length(dp{1}.evt_list));
                    merge_dim = find(size(field_temp)==length(dp{1}.evt_list));
                    merge_field_temp = cat(merge_dim,merge_field_temp,field_temp);
                end
                dp_merge = setfield(dp_merge , cell2mat(field_list(ii_fields)) , merge_field_temp);
                clear field_temp;
                clear merge_field_temp;
            end
            dp_merge.clock_time_sec = dp_merge.clock_time_sec + dp{1}.clock_time_sec;
        end
    end
    clear dp;
    dp{1} = dp_merge;
    clear dp_merge;
    fname = [output_path,'/',dataset_to_merge,'_',dis('f%09d-f%09d',1,length(file_list)) file_RQ1_merged_extension];
    save(fname,'dp')
end % do above if merging .mat files

if merge_binary

    %% set reference constants
    variable_type_strings={ ...
        'char', ...
        'int8', ...
        'int16', ...
        'int32', ...
        'int64', ...
        'uint8', ...
        'uint16', ...
        'uint32', ...
        'uint64', ...
        'single', ...
        'double', ...
        'float' ...
        'float128' ...
        'logical' ...
        };

    variable_type_bytes=[1 1 2 4 8 1 2 4 8 4 8 4 16 1];


    first_file_processed = 0;
    first_file_processed_b3 = 0;
    nb_evts_merged = 0;
    nb_seqs_merged = 0;
    filename_merge = [output_path, '/', dataset_to_merge, '/',dataset_to_merge, sprintf('_f%09d-f%09d',file_list_nbs(1),file_list_nbs(end)), file_RQ1_merged_extension];
    %merged_fid = fopen(filename_merge, 'wb'); % opened to append
    
    %s = LUXSuperLoader_v5(file_list(1).name,[output_path,'/',dataset_to_merge]);
    filename1=[output_path,'/',dataset_to_merge,'/',file_list(1).name];
    [file1_fid endian_switch settings] = fopen_endian_safe(filename1);
    [fn pm mf] = fopen(1);
    if endian_switch
        if strcmp(mf,'ieee-le') % open in big endian
            merged_fid = fopen(filename_merge, 'wb','b');
        else
            merged_fid = fopen(filename_merge, 'wb','l');
        end
    else
        merged_fid = fopen(filename_merge, 'wb',mf);
    end
    endianness = hex2dec('01020304');
    %if endian_switch
    %    endianness = swapbytes(uint32(endianness));
    %end
    fwrite(merged_fid, endianness, 'uint32');
    xmlstring = MakeXMLString(settings);
    xmlstringlength = length(xmlstring);
    %if endian_switch
    %    xmlstringlength = swapbytes(uint32(xmlstringlength));
    %end
    fwrite(merged_fid,xmlstringlength,'uint32');
    fwrite(merged_fid,xmlstring,'int8');
    fclose(file1_fid);
%% COPY BLOCK 1 AND MERGE ALL BLOCK 2    
    for iifile = 1:length(file_list)
    
    	if ~first_file_processed % first file processed when routine finds a non-empty file
    	
    		
    		
% Block 1 %
            % Read file header - we are looking for the number of events in
            % the file
            [file1_fid endian_switch settings] = fopen_endian_safe(filename1);
            
            file1_start = ftell(file1_fid);
            fseek(file1_fid, 0, 'eof'); 
            file1_size = ftell(file1_fid) - file1_start; % account for the settings header
            %fseek(file1_fid, 4, 'bof'); % skip endianness
            fseek(file1_fid, file1_start, 'bof');
            b1_header_string_size = fread(file1_fid, 1, 'uint16');
            b1_header_string = char(fread(file1_fid, b1_header_string_size, '*uint8'))';
            b1_nb_lines = fread(file1_fid, 1, 'int32');
    
            delims=[0 regexp(b1_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            for nw=1:linewords
                names{nw}=b1_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b1_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b1_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                b1_offset(nw) = varsize{nw}*varbytes(nw);
                if strcmp(names{nw},'nb_evts_in_file') || strcmp(names{nw},'nb_evts_file')
                    b1_nb_evts_in_file_pos = ftell(file1_fid);
                end
                b1_data1{nw} = fread(file1_fid, varsize{nw}, vartype{nw});
                if strcmp(names{nw},'first_evt_in_file') || strcmp(names{nw},'first_evt_file')
                    first_evt_in_file = b1_data1{nw};
                end
            end
    	
% Block 2 %
            %b1_offset_tot = sum(b1_offset)*b1_nb_lines;
            %fseek(file1_fid, b1_offset_tot, 'cof');
            b2_header_string_size = fread(file1_fid, 1, 'uint16');
            b2_header_string = char(fread(file1_fid, b2_header_string_size, '*uint8'))';
            clear linewords names vartype varsize varbytes;
            delims=[0 regexp(b2_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            varsize_sum = 0;
            for nw=1:linewords
                names{nw}=b2_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b2_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b2_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            end
            %fseek(file_next_fid, b2_header_string_size, 'cof');
            nb_evts_in_file_pos = ftell(file1_fid);
            nb_evts_in_file = fread(file1_fid, 1, 'int32');
            b2_size = varsize_sum * nb_evts_in_file; % calculate size of block 2
            fseek(file1_fid,b2_size,'cof'); %seek to end of b2
            b2_end = ftell(file1_fid); % get end of block 2 position for appending    	
    	
    		if nb_evts_in_file>0 && first_evt_in_file>0 % copy first file to merged file if there are events in it
                fseek(file1_fid, file1_start, 'bof'); % copy entire file to merged file
                file1_data = fread(file1_fid, file1_size, 'char');
                fwrite(merged_fid, file1_data, 'char');
                nb_evts_merged = nb_evts_in_file;
                first_file_processed = 1;
                %keyboard
            else
                file1_data = [];
            end
            fclose(file1_fid);
    	
    	else  % first_file_processed == 1
    	% now go through the rest of the files and take only Block 2 data and append to end of merged file.
    		filename_next = [output_path,'/',dataset_to_merge,'/',file_list(iifile).name];
            file_next_fid = fopen_endian_safe(filename_next);
            
            file_start = ftell(file_next_fid);
            fseek(file_next_fid, 0, 'eof');
            file_next_size = ftell(file_next_fid)-file_start; % account for settings header
            fseek(file_next_fid, file_start, 'bof');
% Block 1 %
 			b1_header_string_size = fread(file_next_fid, 1, 'uint16');
            b1_header_string = char(fread(file_next_fid, b1_header_string_size, '*uint8'))';
            b1_nb_lines = fread(file_next_fid, 1, 'int32');
			clear linewords names vartype varsize varbytes;
            delims=[0 regexp(b1_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            for nw=1:linewords
                names{nw}=b1_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b1_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b1_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                %b1_offset(nw) = varsize{nw}*varbytes(nw);

                b1_data1{nw} = fread(file1_fid, varsize{nw}, vartype{nw});
                if strcmp(names{nw},'first_evt_in_file') || strcmp(names{nw},'first_evt_file')
                    first_evt_in_file = b1_data1{nw};
                end
            end
    		
% Block 2 %
            b2_header_string_size = fread(file_next_fid, 1, 'uint16');
            b2_header_string = char(fread(file_next_fid, b2_header_string_size, '*uint8'))';
          	clear linewords names vartype varsize varbytes;
          	delims=[0 regexp(b2_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            varsize_sum = 0;
            for nw=1:linewords
                names{nw}=b2_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b2_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b2_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            end
            %fseek(file_next_fid, b2_header_string_size, 'cof');
            nb_evts_in_file = fread(file_next_fid, 1, 'int32');
            b2_size = varsize_sum * nb_evts_in_file; % calculate size of block 2
            if nb_evts_in_file>0 && first_evt_in_file>0
                b2_file_next_data = fread(file_next_fid, b2_size, 'char'); % read block 2
                fseek(merged_fid,b2_end,'bof'); % seek to end of block 2 in merged file
                fwrite(merged_fid, b2_file_next_data, 'char'); % write to end of block 2
                b2_end = ftell(merged_fid); % get new ending to block 2
                nb_evts_merged = nb_evts_merged + nb_evts_in_file;
            end
    	fclose(file_next_fid);
    	end % first_file_processed if statement
    end % for iifile
    
    % congratulations, you've probably successfully merged all the block 2 data! but wait, there's more! on to block 3...
    
%% MERGE BLOCK 3
	for iifile = 1:length(file_list)
    	
    	if ~first_file_processed_b3 % first file processed b3, get header information
    	
    		filename1=[output_path,'/',dataset_to_merge,'/',file_list(iifile).name];
    		
% Block 1 %
            file1_fid = fopen_endian_safe(filename1); % open
            file_start = ftell(file1_fid);
            fseek(file1_fid, 0, 'eof'); 
            file1_size = ftell(file1_fid)-file_start;
            fseek(file1_fid, file_start, 'bof'); % skip endianness 
            b1_header_string_size = fread(file1_fid, 1, 'uint16');
            b1_header_string = char(fread(file1_fid, b1_header_string_size, '*uint8'))';
            b1_nb_lines = fread(file1_fid, 1, 'int32');

            delims=[0 regexp(b1_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            for nw=1:linewords
                names{nw}=b1_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b1_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b1_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                b1_offset(nw) = varsize{nw}*varbytes(nw);                      
                b1_data1{nw} = fread(file1_fid, varsize{nw}, vartype{nw});
                if strcmp(names{nw},'first_evt_in_file') || strcmp(names{nw},'first_evt_file')
                    first_evt_in_file = b1_data1{nw};
                end
            end
    	
% Block 2 %
            %b1_offset_tot = sum(b1_offset)*b1_nb_lines;
            %fseek(file1_fid, b1_offset_tot, 'cof');
            b2_header_string_size = fread(file1_fid, 1, 'uint16');
            b2_header_string = char(fread(file1_fid, b2_header_string_size, '*uint8'))';
            clear linewords names vartype varsize varbytes;
            delims=[0 regexp(b2_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            varsize_sum = 0;
            for nw=1:linewords
                names{nw}=b2_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b2_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b2_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            end
            %fseek(file_next_fid, b2_header_string_size, 'cof');
            nb_evts_in_file = fread(file1_fid, 1, 'int32');
            b2_size = varsize_sum * nb_evts_in_file; % calculate size of block 2
            fseek(file1_fid,b2_size,'cof'); %seek to end of b2
% Block 3 %            
            if ftell(file1_fid)~=(file1_size+file_start); % not at end of file, so there must be a 3rd block    	
    			b3_header_start = ftell(file1_fid); % get start of b3 to go back to to copy 
    			b3_header_string_size = fread(file1_fid,1,'uint16');
				b3_header_string = char(fread(file1_fid, b3_header_string_size, '*uint8'))';
				b3_nb_lines_file_pos = ftell(file1_fid);
				b3_nb_lines = fread(file1_fid,1,'int32');
				clear linewords names vartype varsize varbytes;	
				delims=[0 regexp(b3_header_string,'[\.:; ]')];
            	linewords=(length(delims)-1)/3;
            	names=cell(1,linewords);
            	vartype=cell(1,linewords);
            	varsize=cell(1,linewords);
            	varbytes=zeros(1,linewords);
            	varsize_sum = 0;
            	for nw=1:linewords
                	names{nw}=b3_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                	vartype{nw}=b3_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                	varsize{nw}=sscanf(b3_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                	found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                	varbytes(nw) = variable_type_bytes(found_vartype);
            		varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            	end
            	b3_size = varsize_sum * b3_nb_lines;
            	fseek(file1_fid,b3_header_start,'bof'); % go to beginning of b3 and copy entire thing
            	b3_file_next_data = fread(file1_fid, b3_size+b3_header_string_size+2+4, 'char'); % copy all of b3 including its header
            	
            	if nb_evts_in_file>0 && first_evt_in_file>0
            		fseek(merged_fid, 0, 'eof'); % put block 3 at the end of the file for now
            		b3_merged_start = ftell(merged_fid);
            		b3_nb_lines_file_pos = b3_merged_start + 2+b3_header_string_size; % calculate b3_nb_lines_file_pos in merged file
            		fwrite(merged_fid, b3_file_next_data, 'char');
					nb_seqs_merged = nb_seqs_merged + b3_nb_lines;
               		first_file_processed_b3 = 1;
            	else
                	b3_file_next_data = [];
            	end
            	fclose(file1_fid);
            end
    	
    	else  % first_file_processed == 1
    	% now go through the rest of the files and take only Block 3 data and append to end of merged file.
    		filename_next = [output_path,'/',dataset_to_merge,'/',file_list(iifile).name];
            file_next_fid = fopen_endian_safe(filename_next);
            file_start = ftell(file_next_fid);
            fseek(file_next_fid, 0, 'eof');
            file_next_size = ftell(file_next_fid)-file_start;
            fseek(file_next_fid, file_start, 'bof');
% Block 1 %
 			b1_header_string_size = fread(file_next_fid, 1, 'uint16');
            b1_header_string = char(fread(file_next_fid, b1_header_string_size, '*uint8'))';
            b1_nb_lines = fread(file_next_fid, 1, 'int32');
			clear linewords names vartype varsize varbytes;
            delims=[0 regexp(b1_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            for nw=1:linewords
                names{nw}=b1_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b1_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b1_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                %b1_offset(nw) = varsize{nw}*varbytes(nw);

                b1_data1{nw} = fread(file_next_fid, varsize{nw}, vartype{nw});
                if strcmp(names{nw},'first_evt_in_file') || strcmp(names{nw},'first_evt_file')
                    first_evt_in_file = b1_data1{nw};
                end
            end
    		
% Block 2 %
            b2_header_string_size = fread(file_next_fid, 1, 'uint16');
            b2_header_string = char(fread(file_next_fid, b2_header_string_size, '*uint8'))';
          	clear linewords names vartype varsize varbytes;
          	delims=[0 regexp(b2_header_string,'[\.:; ]')];
            linewords=(length(delims)-1)/3;
            names=cell(1,linewords);
            vartype=cell(1,linewords);
            varsize=cell(1,linewords);
            varbytes=zeros(1,linewords);
            varsize_sum = 0;
            for nw=1:linewords
                names{nw}=b2_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                vartype{nw}=b2_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                varsize{nw}=sscanf(b2_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                varbytes(nw) = variable_type_bytes(found_vartype);
                varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            end
            %fseek(file_next_fid, b2_header_string_size, 'cof');
            nb_evts_in_file = fread(file_next_fid, 1, 'int32');
            b2_size = varsize_sum * nb_evts_in_file; % calculate size of block 2
            fseek(file_next_fid,b2_size,'cof'); %seek to end of b2
% Block 3 %            
            if ftell(file_next_fid)~=(file_next_size+file_start); % not at end of file, so there must be a 3rd block    	
    			b3_header_string_size = fread(file_next_fid,1,'uint16');
				b3_header_string = char(fread(file_next_fid, b3_header_string_size, '*uint8'))';
				b3_nb_lines = fread(file_next_fid,1,'int32');
				clear linewords names vartype varsize varbytes;	
				delims=[0 regexp(b3_header_string,'[\.:; ]')];
            	linewords=(length(delims)-1)/3;
            	names=cell(1,linewords);
            	vartype=cell(1,linewords);
            	varsize=cell(1,linewords);
            	varbytes=zeros(1,linewords);
            	varsize_sum = 0;
            	for nw=1:linewords
                	names{nw}=b3_header_string((delims(3*nw-2)+1):(delims(3*nw-1)-1));
                	vartype{nw}=b3_header_string((delims(3*nw-1)+1):(delims(3*nw)-1));
                	varsize{nw}=sscanf(b3_header_string((delims(3*nw)+1):(delims(3*nw+1)-1)),'%d,')';
                	found_vartype = find(strcmp(variable_type_strings,vartype{nw}),1,'first');
                	varbytes(nw) = variable_type_bytes(found_vartype);
            		varsize_sum = varsize_sum + prod(varsize{nw})*varbytes(nw);
            	end
            	b3_size = varsize_sum * b3_nb_lines;
            	b3_file_next_data = fread(file_next_fid, b3_size, 'char'); % copy just block 3 data
            	
            	if nb_evts_in_file>0 && first_evt_in_file>0
            		fseek(merged_fid, 0, 'eof'); % append to block 3 at the end of the file for now
            		fwrite(merged_fid, b3_file_next_data, 'char');
					nb_seqs_merged = nb_seqs_merged + b3_nb_lines;
            	end
            end
    	fclose(file_next_fid);
    	end % first_file_processed_b3 if statement
   
    
    
            clear file_next_data;
            clear nb_evts_in_file;
            clear vartype;
            clear varsize;
            clear varbytes;
            clear names;
            clear found_vartype;
            clear b1_offset;
            clear file_next_size;
            clear b1_offset_tot;
            clear b1_nb_lines;
            
		 end % for iifile
	


   


    %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%




    % Writes the number of merged events and sequences %

    fseek(merged_fid, b1_nb_evts_in_file_pos, 'bof');
    fwrite(merged_fid, nb_evts_merged, 'uint32');
    fseek(merged_fid, nb_evts_in_file_pos, 'bof');
    fwrite(merged_fid, nb_evts_merged, 'int32');
    fprintf('Total Number of Events Merged: %d\n',nb_evts_merged);

	if exist('b3_nb_lines','var')
		fseek(merged_fid, b3_nb_lines_file_pos, 'bof');
		fwrite(merged_fid, nb_seqs_merged, 'int32');
		fprintf('Total Number of Sequences Merged: %d\n', nb_seqs_merged);
	end
    %% Set file permissions to 755 for lux user
    [status, result] = unix(['chmod 755 ' filename_merge]);
    if status ~= 0
        disp(['Warning: unable to set file permissions for ' filename_merge]);
        dis('Message: %s', result);
    end

    fclose(merged_fid);




end
status=1;

end


function [fid switch_endian settings] = fopen_endian_safe(filename)

[fn,pm,mf]=fopen(1) ; % mf is endianness of this machine

fid = fopen(filename, 'rb', 'n'); % open in big endian (PowerPC)

% endianness check
endian_check = fread(fid,1,'uint32');
if ~strcmp(dec2hex(endian_check),'1020304')
    %fprintf('endianness is wrong...\n');
    switch_endian = 1;
    fclose(fid);
    if strcmp(mf, 'ieee-le')
      %  fprintf('reading file as big endian\n');
        fid = fopen(filename, 'rb', 'b');
        endian_check = fread(fid,1,'uint32');
    else
     %   fprintf('reading file as little endian\n');
        fid = fopen(filename, 'rb', 'l');
        endian_check = fread(fid,1,'uint32');
    end
    
else
    switch_endian = 0;
    %fprintf('endianness is consistent (%s)\n', mf);
end
    xmlstringlength = fread(fid,1,'ulong');
    xmlstring = fread(fid,xmlstringlength,'int8');
    settings = XMLParser(char(xmlstring'));
end












