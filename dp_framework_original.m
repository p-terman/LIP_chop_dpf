function status = dp_framework_original(filename_evt)
filename_prefix=filename_evt(1:19)

addpath(genpath(['~/LUXcode/']));
%this is where your modules are
pathbase= '/home/paul/LUXdata';
% this is where you have folders with the evt files, you will want to have
% folders with the save prefix as the evt files i.e. luxsm_20181213T1400
%but of course, that requirement can be changed by chaning the string
%assignments below

data_path_evt = [pathbase filesep filename_prefix filesep];
filename_rq = strrep(filename_evt,'evt','rq');
data_path_rq = [pathbase filesep];

 lug_iqs_xml_file = '~/MATLAB/lug_iqs_new4.xml';
%this is very important - it is essentially info from the lug - but you can
%use a default/general setting for sims. Thre one I have is based off of
%run3 conditions, but your analysis might not need more fine tuning. 
%alternatively, you could actually query the lug via vpn to sanford - I
%think that this would only be for live data. I have not does this. 

 iq_xml_path=lug_iqs_xml_file;
 %this double assignment is just useful sometimes in bug checking because
 %the modules use differnet variable names than the dpf originally did -
 %obivously can change dpf assignments to make these uniform. 


% xmlfid = fopen(lug_iqs_xml_file,'r');
% lug_iqs_xml = char(fread(xmlfid,inf,'uchar')');
% fclose(xmlfid);
%************check dp_settings_new for max num pulses ******* also check
%rubiks cube

data_processing_settings_path ='~/MATLAB/dp_settings_new.xml';
data_processing_xml_path =data_processing_settings_path;
%this has the basic settings for all of the modules that you have to run

% Don't use % status = InitializeRQFile_Default(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_settings_path,lug_iqs_xml_file);
%this has been replaced by /CppModules/bin/InitializeRQFile_Initialize


%% Here we start with some cpp modules
%in order to get the cpp modules to work, they must first be complied. Go
%to the dp framework folder for the relevant cpp files version and type
%'make' . That should have all the modules in the bin folder to run a
%module, just use its full path a give it the same 6 parameters. if youâ€™re
%inside the CppModules folder, binocessing_settings_path/PhotonTiming path_to_evt_file . I have added the path to .bashrc. 
%

%use instead: 

system(['/home/paul/LUXcode/CppModules/bin/InitializeRQFile_Initialize ' filename_evt ' ' data_path_evt ' ' filename_rq ' ' pathbase ' 1 ' data_processing_settings_path ' ' lug_iqs_xml_file ])
%or cpp modules could be run in terminal like below (with example)
%InitializeRQFile_Initialize luxsm_20170608T1512_f000000001.evt /home/paul/LUXdata/luxsm_20170608T1512 luxsm_20170608T1512_f000000001.rq /home/paul/LUXdata/ 1  /home/paul/Matlab/dp_settings_new.xml /home/paul/Matlab/lug_iqs_new4.xml

status = PulseCalibration_BaselineZen(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_settings_path,lug_iqs_xml_file);

%you can choose which modules you actually need/want to run, but some are
%dependent upon the rqs generated by earlier modules

status = PODSummer_LUXSumPOD(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_settings_path,lug_iqs_xml_file);

%{ 
You might need to compile perusePeeks.c before
PulseFinder_TransparentRubiksCube will work. This code should do it. 
cd ~/LUXcode/Stable_Releases/DataProcessingStableReleases/v2.0/DataProcessing
cd ./MatlabModules/PulseFinder_TransparentRubiksCube/
mex perusePeeks.c 
%}

status = PulseFinder_TransparentRubiksCube(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_settings_path,lug_iqs_xml_file);
system(['/home/paul/LUXcode/CppModules/bin/PulseTiming_HeightTiming ' filename_evt ' ' data_path_evt ' ' filename_rq ' ' pathbase ' 5 ' data_processing_settings_path ' ' lug_iqs_xml_file ])

%not used status = PulseTiming_PerusePeeksMatlab(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);
%don't use: status = PulseTiming_BasicSet(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path); % make sure the the xml has the snipet added for this module

status = PulseQuantities_MinimumSet(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);

status = PulseQuantities_PhotonCounting(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);

status = PulseClassifier_MultiDimensional(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);

status = S1S2Pairing_Naive(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);

status = Event_Classification(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);

%don't need% PositionReconstructizon_CorrCentroid lux10_20130506T2323_f000502_eb00020.evt /home/paul/LUXdata/lux10_20130506T2323/ lux10_20130506T2323_f000502_eb00020.rq /home/paul/LUXdata 13  /home/paul/Matlab/data_processing_settings.xml /home/paul/Matlab/iqs.xml
% hitmap module% don't need - I can look this up if you would like - I
% recall it wasn't relevant for me because hitmap info is displayed in
% visualux without it. 

PositionReconstruction_MercuryI (filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path);
%Mercury is important if you are looking into positions - it will make a
%position for any pulse that is found, however in the corrections module
%later on, it will by default not calculate positions for anything that is
%not s1-s2 paired.

Corrections_PositionCorrection(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path)
%I have modified the  module in my own dpf so that it
%gives s1-s2 pairings to situations where it wouldn't have before. I am not
%sure if you would like something similiar 

Corrections_ApplyCorrections(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path)

% 170608 tomaz's talk recommended removal of EnergyReconstruction_Naive(
%EnergyReconstruction_Naive(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path)

PulseQuantities_TimeSince(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path) %deals with etrains, and looks at the time since the last 'big' event

%PulseQuantities_WaterPmtRQs lux10_20130506T2323_f000502_eb00020.evt /home/paul/LUXdata/lux10_20130506T2323/ lux10_20130506T2323_f000502_eb00020.rq /home/paul/LUXdata 20  /home/paul/Matlab/dp_settings_new.xml /home/paul/Matlab/lug_iqs_new4.xml
%TriggerRQModule(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path)
%%
status =AdditionalFileFormat_SaveMatFile(filename_evt,data_path_evt,filename_rq,data_path_rq,data_processing_xml_path,iq_xml_path)
%this is to save the .rq file as a .mat file saved in /LUXdata/matfiles

%system(['/global/u2/p/pterman/LUXcode/Stable_Releases/v2.0/DataProcessing/CppModules/bin/rq_to_rqroot ' filename_evt ' ' data_path_evt ' ' filename_rq ' ' pathbase ' 1 ' data_processing_settings_path ' ' lug_iqs_xml_file ])
%this line would make a root output file saved in /LUXdata/rootfiles

